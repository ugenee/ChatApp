/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  HTTPValidationError,
  Token,
  UserCreate,
  UserLogin
} from '../../model';





/**
 * @summary Register
 */
export const registerRegisterPost = (
    userCreate: UserCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    
    return axios.default.post(
      `/register`,
      userCreate,options
    );
  }



export const getRegisterRegisterPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerRegisterPost>>, TError,{data: UserCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof registerRegisterPost>>, TError,{data: UserCreate}, TContext> => {

const mutationKey = ['registerRegisterPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerRegisterPost>>, {data: UserCreate}> = (props) => {
          const {data} = props ?? {};

          return  registerRegisterPost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegisterRegisterPostMutationResult = NonNullable<Awaited<ReturnType<typeof registerRegisterPost>>>
    export type RegisterRegisterPostMutationBody = UserCreate
    export type RegisterRegisterPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Register
 */
export const useRegisterRegisterPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerRegisterPost>>, TError,{data: UserCreate}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof registerRegisterPost>>,
        TError,
        {data: UserCreate},
        TContext
      > => {

      const mutationOptions = getRegisterRegisterPostMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Login
 */
export const loginLoginPost = (
    userLogin: UserLogin, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Token>> => {
    
    
    return axios.default.post(
      `/login`,
      userLogin,options
    );
  }



export const getLoginLoginPostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginLoginPost>>, TError,{data: UserLogin}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof loginLoginPost>>, TError,{data: UserLogin}, TContext> => {

const mutationKey = ['loginLoginPost'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof loginLoginPost>>, {data: UserLogin}> = (props) => {
          const {data} = props ?? {};

          return  loginLoginPost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LoginLoginPostMutationResult = NonNullable<Awaited<ReturnType<typeof loginLoginPost>>>
    export type LoginLoginPostMutationBody = UserLogin
    export type LoginLoginPostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Login
 */
export const useLoginLoginPost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginLoginPost>>, TError,{data: UserLogin}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof loginLoginPost>>,
        TError,
        {data: UserLogin},
        TContext
      > => {

      const mutationOptions = getLoginLoginPostMutationOptions(options);

      return useMutation(mutationOptions );
    }
    